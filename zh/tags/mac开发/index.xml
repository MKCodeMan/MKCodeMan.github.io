<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mac开发 on 杨尚达</title>
    <link>http://MKCodeMan.github.io/zh/tags/mac%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in Mac开发 on 杨尚达</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 15 Apr 2024 10:27:06 +0800</lastBuildDate>
    <atom:link href="http://MKCodeMan.github.io/zh/tags/mac%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NSWindow学习</title>
      <link>http://MKCodeMan.github.io/zh/posts/%E5%AD%A6%E4%B9%A0/osx%E5%BC%80%E5%8F%91/nswindow%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 15 Apr 2024 10:27:06 +0800</pubDate>
      <guid>http://MKCodeMan.github.io/zh/posts/%E5%AD%A6%E4%B9%A0/osx%E5%BC%80%E5%8F%91/nswindow%E5%AD%A6%E4%B9%A0/</guid>
      <description>在iOS开发中与之对应的是UIWindow，我们操作的主要是UIView和UIViewController。对window的操作不多，而在macOS中，NSWindow用于设置窗口的外观和行为。&#xA;styleMask Link to heading 用于设置窗口样式，在window初始化时可以设置。&#xA;常用配置 Link to heading 1.NSWindowStyleMaskTitled: 窗口有标题栏。 2.NSWindowStyleMaskClosable: 窗口可以关闭。 3.NSWindowStyleMaskResizable: 窗口可以调整大小。 4.NSWindowStyleMaskMiniaturizable: 窗口可以最小化。 5.NSWindowStyleMaskFullScreen: 窗口可以全屏显示。 6.NSWindowStyleMaskBorderless: 窗口没有边框。 7.NSWindowStyleMaskUtilityWindow: 窗口作为工具窗口显示。 8.NSWindowStyleMaskHUDWindow: 窗口作为HUD（Head-Up Display）风格显示。&#xA;BackingStoreType Link to heading 1.NSBackingStoreRetained: 使用可保留的后备存储。窗口内容被绘制到内存中，并在需要时缓存以提高性能。这是默认值，适用于大多数情况。 2.NSBackingStoreNonretained: 使用非保留的后备存储。窗口内容被绘制到内存中，但不会被缓存，而是每次显示时都重新绘制。这可能会导致性能降低，但在某些情况下可能是必要的，例如动态内容的窗口。 3.NSBackingStoreBuffered: 使用缓冲的后备存储。窗口内容被绘制到图形处理单元的缓冲区中，并根据需要复制到屏幕上。这通常用于OpenGL或其他图形处理技术，以便更有效地管理窗口内容。&#xA;初始化 Link to heading let window = NSWindow(contentRect: NSRect(x: 0, y: 0, width: 800, height: 600), styleMask: [.titled, .closable, .miniaturizable, .resizable], backing: .buffered, defer: false) //是否延迟执行 // 设置窗口标题 window.title = &amp;#34;My App&amp;#34; </description>
    </item>
    <item>
      <title>NSApplication学习</title>
      <link>http://MKCodeMan.github.io/zh/posts/%E5%AD%A6%E4%B9%A0/osx%E5%BC%80%E5%8F%91/nsapplication%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 15 Apr 2024 10:15:34 +0800</pubDate>
      <guid>http://MKCodeMan.github.io/zh/posts/%E5%AD%A6%E4%B9%A0/osx%E5%BC%80%E5%8F%91/nsapplication%E5%AD%A6%E4%B9%A0/</guid>
      <description>NSApplication是Cocoa框架中的一个类，用于创建和管理Mac应用的主事件循环和事件处理，是macOS应用的基础。&#xA;App无storyboard启动 Link to heading 1.首先删除main.storyboard文件，然后再Build Setting中AppKit Main Storyboard File Base Name清空。 2.创建main.swift文件 3.移除AppDelegate中*@main* 4.在mian中添加代码&#xA;let app = NSApplication.shared let delegate = AppDelegate() app.delegate = delegate app.run() 5.在AppDelegate中配置应用的菜单和窗口等</description>
    </item>
  </channel>
</rss>
